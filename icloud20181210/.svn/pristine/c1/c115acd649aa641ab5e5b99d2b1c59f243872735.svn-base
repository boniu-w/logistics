package org.cloud.webapp.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.Constants;
import org.cloud.dto.Lmm110DtoTo;
import org.cloud.model.Lmm110Model;
import org.cloud.model.Lmmmorg;
import org.cloud.service.Lmm110Service;
import org.cloud.webapp.BaseController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.util.MessageSource;

/**
 * @作者 霍五星
 * @时间 2019/05/22 11:51:00
 * @位置 河南省郑州市高新区河南八六三软件园 
 * @用途 商品メンテナンス
 */
@Controller
@RequestMapping(value="/lmm110Controller")
public class Lmm110Controller extends BaseController{
	//lmm110Serviceの自動注入
	@Autowired
	private Lmm110Service lmm110Service;
	//テナントコードの初期化
	private static String tntcod = null;
	//ユーザーコードの初期化
	private static String usrcod = null;
	//商品コードの初期化
	private static String itmcod = null;
	
	/*
	 * 商品メンテナンス画面の初期化処理
	 * @param modFlg		モードフラグ
	 * @param req			HttpServletRequest
	 * @param appStaymdhms	適用開始日時分秒
	 * @param lmm109DtoKsjk	一覧画面の検索条件対象
	 * @return
	 */
	@RequestMapping(value="/init")
	public ModelAndView init(String modFlg, HttpServletRequest req, Date appStaymdhms, @ModelAttribute Lmm109DtoKsjk lmm109DtoKsjk) {
		//ModelAndViewを新規する
		ModelAndView mav = new ModelAndView();
		//Lmm110DtoTo対象の初期化
		Lmm110DtoTo lmm110 = new Lmm110DtoTo();
		//SimpleDateFormat対象の初期化
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		//sessionを取得する
		HttpSession session = req.getSession();
		//テナントコードを取得する
		tntcod = (String)session.getAttribute("tntncod");
		//商品コードを取得する
		itmcod = (String)session.getAttribute("itmcod");
		
		//処理モード＝「新規」の場合
		if  ("0".equals(modFlg)) {
			//適用開始日時をカレントシステムタイムに設置する
			lmm110.setAppStaymd(sdf.format(new Date()));
			lmm110.setAppStaHh(new SimpleDateFormat("HH").format(new Date()));
			lmm110.setAppStaMm(new SimpleDateFormat("mm").format(new Date()));
			//適用終了日時をカレントシステムタイムに設置する
			lmm110.setAppEndymd(sdf.format(new Date()));
			lmm110.setAppEndHh(new SimpleDateFormat("HH").format(new Date()));
			lmm110.setAppEndMm(new SimpleDateFormat("mm").format(new Date()));
		//処理モード＝「変更」の場合
		}else {
			//SimpleDateFormat対象の再処理
			sdf = new SimpleDateFormat("yyyy-MM-dd-HH:mm");
			//条件による結果を取得
			Lmm110Model lmm110Model = lmm110Service.updateSelect(tntcod, itmcod, appStaymdhms);
			//前回更新ユーザコードを設置する
			lmm110.setUpdnam(lmm110Model.getUpdnam());
			//前回更新日時を設置する
			String updymdhm = lmm110Model.getUpdymdhms().substring(0, lmm110Model.getUpdymdhms().indexOf(" ")-1);
			updymdhm = updymdhm.replace('-', '/');
			updymdhm = updymdhm.replace(updymdhm.charAt(updymdhm.indexOf(".")), ':');
			updymdhm = updymdhm.replaceFirst(":", " ");
			lmm110.setUpdymdhms(updymdhm);
			//商品コードを設置する
			lmm110.setItmcod(lmm110Model.getItmcod());
			//適用開始日·年月日を設置する
			lmm110.setAppStaymd(sdf.format(lmm110Model.getAppStaymdhms()).substring(0, 10));
			//適用開始日時・時を設置する
			lmm110.setAppStaHh(sdf.format(lmm110Model.getAppStaymdhms()).substring(11,13));
			//適用開始日時・分を設置する
			lmm110.setAppStaMm(sdf.format(lmm110Model.getAppStaymdhms()).substring(14));
			//適用終了日時・年月日を設置する
			lmm110.setAppEndymd(sdf.format(lmm110Model.getAppEndymdhms()).substring(0, 10));
			//適用終了日時・時を設置する
			lmm110.setAppEndHh(sdf.format(lmm110Model.getAppEndymdhms()).substring(11, 13));
			//適用終了日時・分を設置する
			lmm110.setAppEndMm(sdf.format(lmm110Model.getAppEndymdhms()).substring(14));
			//商品名を設置する
			lmm110.setItmnam1(lmm110Model.getItmnam1());
			//申請組織コードを設置する
			lmm110.setApporgcod(lmm110Model.getApporgcod());
			//申請組織名を設置する
			lmm110.setOrgnam1(lmm110Model.getOrgnam1());
			//廃止フラグを設置する
			lmm110.setAboflg(lmm110Model.getAboflg());
			//更新回数を設置する
			lmm110.setUpdeac(lmm110Model.getUpdeac());
		}
		
		//テナントコードをModelAndViewに入れる
		mav.addObject("tntcod",tntcod);
		//モードフラグをModelAndViewに入れる
		mav.addObject("modFlg",modFlg);
		//Lmm110DtoTo対象をModelAndViewに入れる
		mav.addObject("lmm110",lmm110);
		//一覧画面の検索条件の保持
        mav.addObject("lmm109DtoKsjk", lmm109DtoKsjk);
		mav.setViewName("/lmm110/lmm110");
		return mav;
	}

	/**
	 * 「新規」の場合
	 * @param lmm110	商品マスタクラス
	 * @param req		HttpServletRequest
	 * @return
	 */
	@RequestMapping(value="/insert")
	public ModelAndView insert(@ModelAttribute Lmm110DtoTo lmm110, HttpServletRequest req) {
		//SimpleDateFormat対象の初期化
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd-HH:mm");
		//セッションを取得する
		HttpSession session = req.getSession();
		//ユーザーコードを設置する
		String usrcod = (String)session.getAttribute("usrcod");
		
		//適用開始日·年月日の初期化
		Date appStaYmd_Txt = null;
		//適用終了日·年月日の初期化
		Date appEndYmd_Txt = null;
		try {
			appStaYmd_Txt = sdf.parse(lmm110.getAppStaymd()+"-"+lmm110.getAppStaHh()+":"+lmm110.getAppStaMm());
			appEndYmd_Txt = sdf.parse(lmm110.getAppEndymd()+"-"+lmm110.getAppEndHh()+":"+lmm110.getAppEndMm());
		} catch (ParseException e) {
			e.printStackTrace();
		}
		//適用開始日時、適用終了日時のチェック
		String message = checkDate("0001", "lmmmitm", {"tntcod", "itmcod"}, lmm110.getAppStaymd(), lmm110.getAppEndymd(), DB.connection());
		if (message!=null) {
			this.saveMessage(MessageSource.getText(req,message));
			return new ModelAndView("redirect:init?modFlg=0");
		}
		
		//登録の結果、処理日時点の有効データが存在しなくなる場合、ウォーニング（更新はする）のチェック
		int resultOfAppStaYmd = appStaYmd_Txt.compareTo(new Date());
		int resultOfAppEndYmd = appEndYmd_Txt.compareTo(new Date());
		if (resultOfAppStaYmd>0||resultOfAppEndYmd<0) {
			this.saveMessage(MessageSource.getText(req, "LVB-004044"));
			return new ModelAndView("redirect:init?modFlg=0");
		}
		
		//入力データが登録済みの場合エラー
		int insertSelect = lmm110Service.checkItmcod(tntcod, lmm110.getItmcod(), appStaYmd_Txt);
		if (insertSelect>0) {
			this.saveMessage(MessageSource.getText(req, "LVB-005005"));
			return new ModelAndView("redirect:init?modFlg=0");
		}
		
		//申請組織が未登録の場合エラー
		int checkApporgcod = lmm110Service.checkApporgcod(tntcod, lmm110.getApporgcod(), appStaYmd_Txt, appEndYmd_Txt);
		if (checkApporgcod==0) {
			this.saveMessage(MessageSource.getText(req, "LVB-004023", new String[]{"申請組織コード", "組織マスタ"}));
			return new ModelAndView("redirect:init?modFlg=0");
		}
		
		//登録処理(登録方法区分、ユーザコード)
		Lgc lgc = BaseController.lgc211();
		String insmethodkbn = lgc.getInsmethodkbn();
		
		//Lmm110Model対象の初期化
		Lmm110Model lmm110Model = new Lmm110Model();
		//更新者を設置する
		lmm110Model.setUpdnam(usrcod);
		//更新年月日時分秒を設置する
		lmm110Model.setUpdymdhms(sdf.format(new Date()));
		//商品コードを設置する
		lmm110Model.setItmcod(lmm110.getItmcod());
		//適用開始日·年月日を設置する
		lmm110Model.setAppStaymdhms(appStaYmd_Txt);
		//適用終了日·年月日を設置する
		lmm110Model.setAppEndymdhms(appEndYmd_Txt);
		//商品名を設置する
		lmm110Model.setItmnam1(lmm110.getItmnam1());
		//申請組織コードを設置する
		lmm110Model.setApporgcod(lmm110.getApporgcod());
		//廃止フラグを設置する
		lmm110Model.setAboflg((lmm110.getAboflg()==null)?(Constants.ABOFLG_OFF):(Constants.ABOFLG_ON));
		//登録年月日時分秒を設置する
		lmm110Model.setInsymdhms(new Date());
		//登録者を設置する
		lmm110Model.setInsnam(usrcod);
		//登録者区分を設置する
		lmm110Model.setInskbn("");
		//登録方法区分を設置する
		lmm110Model.setInsmethodkbn(insmethodkbn);
		//更新回数を設置する
		lmm110Model.setUpdeac(1);
		//更新者区分を設置する
		lmm110Model.setUpdkbn("");
		//更新方法区分を設置する
		lmm110Model.setUpdmethodkbn("0000");
		//テナントコードを設置する
		lmm110Model.setTntcod(tntcod);
		int insert = lmm110Service.insert(lmm110Model);
		if (insert==1) {
			this.saveMessage(MessageSource.getText(req, "LVB-000003"));
		}else {
			return new ModelAndView("redirect:init?modFlg=0");
		}
	}
	
	/**
	 * 「変更」の場合
	 * @param lmm110	商品マスタクラス
	 * @param req		HttpServletRequest
	 * @return
	 */
	@RequestMapping(value="update",produces="text/html; charset=UTF-8")
	public ModelAndView update(HttpServletRequest req, RedirectAttributes ra, @ModelAttribute Lmm110DtoTo lmm110) {
		//ModelAndViewを新規する
		ModelAndView mav = new ModelAndView();
		//SimpleDateFormat対象の初期化
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd-HH:mm");
		
		//適用開始日·年月日の初期化
		Date appStaYmd_Txt = null;
		//適用終了日·年月日の初期化
		Date appEndYmd_Txt = null;
		try {
			appStaYmd_Txt = sdf.parse(lmm110.getAppStaymd()+"-"+lmm110.getAppStaHh()+":"+lmm110.getAppStaMm());
			appEndYmd_Txt = sdf.parse(lmm110.getAppEndymd()+"-"+lmm110.getAppEndHh()+":"+lmm110.getAppEndMm());
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		//適用開始日時、適用終了日時のチェック
		String message = checkDate("0002", "lmmmitm",{"tntcod", "itmcod"}, lmm110.getAppStaymd(), lmm110.getAppEndymd(), DB.connection());
		if (message!=null) {
			this.saveMessage(MessageSource.getText(req,message));
			return new ModelAndView("redirect:init?modFlg=1");
		}
		
		//登録の結果、処理日時点の有効データが存在しなくなる場合、ウォーニング（更新はする）のチェック
		int resultOfAppStaYmd = appStaYmd_Txt.compareTo(new Date());
		int resultOfAppEndYmd = appEndYmd_Txt.compareTo(new Date());
		if (resultOfAppStaYmd>0||resultOfAppEndYmd<0) {
			this.saveMessage(MessageSource.getText(req, "LVB-004044"));
			return new ModelAndView("redirect:init?modFlg=1");
		}
		
		//申請組織が未登録の場合エラー
		int checkApporgcod = lmm110Service.checkApporgcod(tntcod, lmm110.getApporgcod(), appStaYmd_Txt, appEndYmd_Txt);
		if (checkApporgcod==0) {
			this.saveMessage(MessageSource.getText(req, "LVB-004023", new String[]{"申請組織コード", "組織マスタ"}));
			return new ModelAndView("redirect:init?modFlg=1");
		}
		
		//Lmm110DtoTo対象の初期化
		Lmm110Model lmm110Model = new Lmm110Model();
		//テナントコードを設置する
		lmm110Model.setTntcod(tntcod);
		//更新者を設置する
		lmm110Model.setUpdnam(usrcod);
		//年月日時分秒を設置する
		lmm110Model.setUpdymdhms(sdf.format(new Date()));
		//商品コードを設置する
		lmm110Model.setItmcod(lmm110.getItmcod());
		//適用開始日時分秒を設置する
		lmm110Model.setAppStaymdhms(appStaYmd_Txt);
		//適用終了日時分秒を設置する
		lmm110Model.setAppEndymdhms(appEndYmd_Txt);
		//商品名を設置する
		lmm110Model.setItmnam1(lmm110.getItmnam1());
		//申請組織コードを設置する
		lmm110Model.setApporgcod(lmm110.getApporgcod());
		//廃止フラグを設置する
		lmm110Model.setAboflg((lmm110.getAboflg()==null)?(Constants.ABOFLG_OFF):(Constants.ABOFLG_ON));
		//更新回数を設置する
		lmm110Model.setUpdeac(lmm110.getUpdeac());
		//更新者区分を設置する
		lmm110Model.setUpdkbn("");
		//更新方法区分を設置する
		lmm110Model.setUpdmethodkbn("0001");
		//更新の結果を取得する
		int update = lmm110Service.update(lmm110Model);
		//更新件数＝０の時エラー（排他制御エラー）
		if (update==0) {
			this.saveMessage(MessageSource.getText(req,"LVB-005010"));
		//更新できた場合
		}else {
			this.saveMessage(MessageSource.getText(req,"LVB-000004"));
			//一覧検索条件の保持
			ra.addFlashAttribute("searchScope_Rdo",lmm110.getSearchScope_());
			ra.addFlashAttribute("applyOrgCode_Txt",lmm110.getApplyOrgCode_());
			ra.addFlashAttribute("itemCode_Txt",lmm110.getItemCode_());
			ra.addFlashAttribute("itemName_Txt",lmm110.getItemName_());
			mav.setViewName("redirect:/lmm109Controller/selectInfo");
		}
		return mav;
	}
	
	/**
	 * 組織コードに基づいて組織名を検索する
	 * @param orgcod	組織コード
	 * @param req		HttpServletRequest
	 * @return
	 */
	@RequestMapping(value="/selectOrg")
	public ModelAndView selectOrg(String orgcod, String orgNam1, HttpServletRequest req) {
		//ModelAndViewを新規する
		ModelAndView mav = new ModelAndView();
		//セッションを取得する
		HttpSession session = req.getSession();
		//テナントコードを取得する
		String tntcod = (String)session.getAttribute("tntcod");
		//組織コードに基づいて組織名を検索する
		List<Lmmmorg> orgs = lmm110Service.selectOrg(tntcod, orgcod, orgNam1);
		//組織コードをModelAndViewに入れる
		mav.addObject("orgcod", orgcod);
		//組織名をModelAndViewに入れる
		mav.addObject("orgnam1", orgNam1);
		//組織名リストをModelAndViewに入れる
		mav.addObject("list", orgs);
		mav.setViewName("/slvb110/slvb110");
		return mav;
	}
	
	/**
	 * 適用開始日時、適用終了日時のチェック
	 * @param handlekbn		処理方法区分
	 * @param tableName		テーブル名
	 * @param fieldNames	フィールド名
	 * @param appStaymd		開始時間
	 * @param appEndymd		終了時間
	 * @param connection	接続名
	 * @return
	 */
	private String checkDate(String handlekbn, String tableName, String[] fieldNames, Date appStaymd, Date appEndymd, DB connection) {
		//汎用部品方法で結果を取得する
		int result = lgc209(handlekbn, tableName, fieldNames, appStaymd, appEndymd, connection);
		String message = null;
		switch(result) {
			//処理結果＝98の時
			case 98:
				message = "LVB-004002";
				break;
			//処理結果＝99の時
			case 99:
				message = "LVB-004022";
				break;
			default:break;
		}
		return message;
	}
}
