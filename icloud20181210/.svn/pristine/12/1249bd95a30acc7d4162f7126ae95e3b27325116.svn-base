package org.cloud.webapp.controller;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.Constants;
import org.cloud.dto.Lmm117ResultType;
import org.cloud.model.Lmmmgrl;
import org.cloud.service.Lmm101Service;
import org.cloud.service.impl.Lmm117ServiceImpl;
import org.cloud.webapp.BaseController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.util.MessageSource;

/**
 * @author WG
 * @date 2019年5月22日 下午8:46:51
 */
@Controller
@RequestMapping(value = "/lmm117Controller")
public class Lmm117Controller extends BaseController {
	@Autowired
	Lmm117ServiceImpl lmm117ServiceImpl;
	@Autowired
	private Lmm101Service lmm101Service;

	/**
	 * 組織一覧画面の初期化処理
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/initPage", method = { RequestMethod.POST, RequestMethod.GET })
	public ModelAndView initPage(HttpServletRequest request) {
		// ModelAndViewの定義
		ModelAndView modelAndView = new ModelAndView();
		HttpSession session = request.getSession();
		String tntcod = (String) session.getAttribute("tntcod");
		// テスト値（納品時、削除必要）
		tntcod = "01001006";

		session.setAttribute("messages", null);
		HashMap<String , Object> attribute = (HashMap)session.getAttribute("hashMap");
		attribute=null;
		session.setAttribute("hashMap", attribute);
		
		// メーニュから場合
		// DashBoardから遷移した場合、全項目をブランク表示にする。
		// 検索範囲の初期値を２に設定する
		String searchZone_Rdo = "2";
		// メンテナンス画面から遷移した場合、
		// quallBy()事件で、元検索条件の保持を行う

		// 組織識別区分のリスト表示処理
		List<Lmmmgrl> listOrgKbn2_Sct = lmm101Service.findOrgKbn2_Sct(tntcod,
				Constants.GENERAL_Flg1);
		modelAndView.addObject("listOrgKbn2_Sct", listOrgKbn2_Sct);

		// 初期表示データ検索範囲 の設定
		modelAndView.addObject("searchZone_Rdo", searchZone_Rdo);

		// ページ遷移
		modelAndView.setViewName("/lmm117/lmm117");
		return modelAndView;
	}

	/**
	 * 检索按钮按下事件
	 * 
	 * @param hashMap
	 * @return
	 */
	@RequestMapping(value = "/findSomeField")
	public ModelAndView findSomeField(@RequestParam HashMap<String, Object> hashMap,
			HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		HttpSession session = request.getSession();
		session.setAttribute("messages", null);
		session.setAttribute("hashMap", hashMap);
		
		List<Lmm117ResultType> findSomeField =null;
		/*如果检索发生异常,则	LVB-009001						
		検索時にエラーが発生した場合、以下のメッセージを出力し、以降の処理を実施しない。*/		
		try {
			/* 调用service层方法,得到数据库的查询结果 */
			findSomeField = lmm117ServiceImpl.findSomeField(hashMap);
		}catch(Exception e){
			super.saveMessage(MessageSource.getText(request, "LVB-009001"));
		}
		
		/*
		 * 如果list长度为0,则在前台 显示信息 LVB-004017 
		 * 【メッセージID】 LVB-004017 ： 検索条件に該当するデータが存在しません。
		 * ログを出力する。 出力内容は以下の通り メッセージ LVB-004017 
		 * 文字置換 なし 
		 * 如果list长度大于总长度,则在前台 显示信息
		 * LVB-004018 最大表示件数を超えたため{0}件まで表示します。 
		 * 文字置換 セッション情報.最大表示上限数
		 */
		if (findSomeField.size() == 0) {
			super.saveMessage(MessageSource.getText(request, "LVB-004017"));
		} else if (findSomeField.size() > findAll().size()) {
			String[] messagesArgs = { "セッション情報.最大表示上限数" };
			super.saveMessage(MessageSource.getText(request, "LVB-004018", messagesArgs));
		} 
		/*
		 * 正确显示情况 : 把结果放到model中,返回jsp
		 */
		modelAndView.setViewName("/lmm117/lmm117");
		modelAndView.addObject("list", findSomeField);
		
		return modelAndView;
	}

	@RequestMapping(value = "/findAll")
	public List<HashMap<String, Object>> findAll() {
		List<HashMap<String, Object>> findAll = lmm117ServiceImpl.findAll();
		System.out.println(findAll);
		return findAll;
	}

}
